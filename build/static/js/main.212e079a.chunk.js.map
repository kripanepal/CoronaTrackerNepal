{"version":3,"sources":["Charts.js","header.js","main.js","index.js"],"names":["Charts","props","lastDate","useState","loading","setLoading","numDays","setNumdays","graphType","setGraphType","test","setTest","returnLines","str","TestGraph","Line","Bar","Area","console","log","dataKey","stroke","stringToColour","fill","dot","useEffect","fetch","then","res","json","data","changeDays","event","target","value","className","Spinner","animation","variant","onSubmit","e","preventDefault","type","min","max","placeholder","style","width","onChange","dropdown0","checked","displayGraphMenu","LineChart","BarChart","AreaChart","PieChart","ComposedChart","current","needed","casesArray","first","historyData","timeline","dates","Object","keys","cases","values","deaths","recovered","i","length","push","n","lastIndexOf","substring","testing","height","strokeDasharray","href","renderLineChart","Main","latest","setLatest","nepal","setNepal","a","urls","Promise","all","catch","err","nepalFlag","countryInfo","flag","lastUpdated","Date","parseInt","updated","toString","Table","striped","bordered","hover","colSpan","src","alt","color","end","duration","separator","name","donno","main","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.212e079a.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport \"./App.css\";\r\nimport \"./charts.css\";\r\nimport Spinner from \"react-bootstrap/Spinner\";\r\nimport {\r\n  LineChart,\r\n  Bar,\r\n  BarChart,\r\n  Pie,\r\n  PieChart,\r\n  Area,\r\n  AreaChart,\r\n  ComposedChart,\r\n  Line,\r\n  CartesianGrid,\r\n  XAxis,\r\n  YAxis,\r\n  Tooltip,\r\n  Legend,\r\n  ResponsiveContainer,\r\n} from \"recharts\";\r\n\r\nfunction Charts(props) {\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  const [numDays, setNumdays] = useState(30);\r\n\r\n  const [graphType, setGraphType] = useState(\"Line\");\r\n  const [test, setTest] = useState([]);\r\n\r\n\r\n  var lastDate;\r\n\r\n  useEffect(() => {\r\n    fetch(`https://disease.sh/v2/historical/np?lastdays=${numDays}`)\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        setTest(data);\r\n        setLoading(false);\r\n\r\n      });\r\n\r\n    // eslint-disable-next-line\r\n  }, [numDays]);\r\n\r\n  function testing(needed) {\r\n    var casesArray = [];\r\n\r\n    var first = \"true\";\r\n\r\n\r\n    console.log(test)\r\n    var historyData = { ...test.timeline };\r\n\r\n\r\n    var dates = Object.keys(historyData.cases);\r\n    var cases = Object.values(historyData.cases);\r\n    var deaths = Object.values(historyData.deaths);\r\n    var recovered = Object.values(historyData.recovered);\r\n\r\n    for (var i = 0; i < dates.length; i++) {\r\n      if (casesArray.length < cases.length) {\r\n        casesArray.push({});\r\n\r\n      }\r\n    }\r\n\r\n    for (var i = 0; i < dates.length; i++) {\r\n      if (first) {\r\n        var n = dates[i].lastIndexOf(\"/\");\r\n        casesArray[i][\"date\"] = dates[i].substring(0, n);\r\n        lastDate = dates[i];\r\n      }\r\n\r\n      casesArray[i][\"confirmed\"] = cases[i];\r\n      casesArray[i][\"deaths\"] = deaths[i];\r\n      casesArray[i][\"recovered\"] = recovered[i];\r\n    }\r\n    first = false;\r\n\r\n\r\n    console.log(casesArray)\r\n    return casesArray;\r\n\r\n  }\r\n\r\n  function showFoot() {\r\n    let fixed = (\r\n      <div>\r\n              <div className=\"graphMessage\">Graph last updated on : {lastDate}</div>\r\n\r\n              <div className=\"graphMessage\">Full information can be obtained from <a href = \"https://coronatrackersankraman.netlify.app/\">here</a></div>\r\n\r\n      </div>\r\n    );\r\n\r\n    return fixed;\r\n  }\r\n\r\n\r\n  function returnLines(str) {\r\n    var temp;\r\n    function what() {\r\n      if (graphType === \"Line\") {\r\n        return Line;\r\n      }\r\n\r\n      if (graphType === \"Bar\") {\r\n        return Bar;\r\n      }\r\n\r\n      if (graphType === \"Area\") {\r\n        return Area;\r\n      }\r\n\r\n      if (graphType === \"AreaLineComposed\") {\r\n        return;\r\n      }\r\n    }\r\n\r\n    var TestGraph = what();\r\n    console.log(\"here\");\r\n    temp = (\r\n      <TestGraph\r\n        dataKey={str}\r\n        stroke={stringToColour(str)}\r\n        fill={stringToColour(str)}\r\n        dot={false}\r\n      />\r\n\r\n    );\r\n\r\n\r\n    return temp;\r\n  }\r\n\r\n  var stringToColour = function (str) {\r\n    if (str === \"confirmed\") {\r\n      return \"blue\"\r\n    }\r\n    if (str === \"deaths\") {\r\n      return \"red\"\r\n    }\r\n    if (str === \"recovered\") {\r\n      return \"green\"\r\n    }\r\n\r\n  };\r\n\r\n  function renderLineChart() {\r\n    var width;\r\n    function what() {\r\n      if (graphType === \"Line\") {\r\n        return LineChart;\r\n      }\r\n\r\n      if (graphType === \"Bar\") {\r\n        return BarChart;\r\n      }\r\n      if (graphType === \"Area\") {\r\n        return AreaChart;\r\n      }\r\n      if (graphType === \"Pie\") {\r\n        return PieChart;\r\n      }\r\n      if (graphType === \"AreaLineComposed\") {\r\n        return ComposedChart;\r\n      }\r\n    }\r\n\r\n    var TestGraph = what();\r\n\r\n    var current = testing(\"confirmed\");\r\n\r\n\r\n   \r\n      return (\r\n        <div className=\"graphs\">\r\n\r\n\r\n          <ResponsiveContainer width={width} height={400}>\r\n            <TestGraph data={current}>\r\n              <CartesianGrid strokeDasharray=\"3 3\" />\r\n              <XAxis dataKey=\"date\" />\r\n              <YAxis />\r\n              <Tooltip />\r\n              <Legend />\r\n\r\n              {returnLines(\"confirmed\")}\r\n              {returnLines(\"deaths\")}\r\n              {returnLines(\"recovered\")}\r\n            </TestGraph>\r\n          </ResponsiveContainer>\r\n          <div className = \"graphMessage\"><h4>Nepal</h4></div>\r\n\r\n          {showFoot()}\r\n        </div>\r\n\r\n      );\r\n    \r\n  }\r\n\r\n\r\n  function changeDays(event) {\r\n    setNumdays(event.target.value);\r\n  }\r\n\r\n\r\n\r\n  function isFrom() {\r\n    return (\r\n      <>\r\n\r\n        <form onSubmit={(e) => e.preventDefault()}>\r\n          <input\r\n            type=\"number\"\r\n            min=\"0\"\r\n            max=\"200\"\r\n            placeholder={\"30 days\"}\r\n            style={{ width: 72 }}\r\n            onChange={changeDays}\r\n          /> {displayGraphMenu()}\r\n        </form>\r\n\r\n\r\n      </>\r\n    );\r\n  }\r\n\r\n  function displayGraphMenu() {\r\n    function handleChange(e) {\r\n      setGraphType(e.target.value);\r\n    }\r\n\r\n    var dropdown0 = (\r\n      <>\r\n        <select onChange={handleChange}>\r\n          <option value={\"Line\"} checked > Graph type</option>\r\n          <option value={\"Line\"}> Line</option>\r\n          <option value={\"Bar\"}> Bar</option>\r\n          <option value={\"Area\"}> Area</option>\r\n\r\n          {/* <option value={\"Composed\"}> Composed</option> */}\r\n        </select>\r\n        <br />\r\n\r\n      </>\r\n    );\r\n\r\n    return <>{dropdown0} </>;\r\n  }\r\n\r\n\r\n\r\n\r\n  return loading ? (\r\n    <div className=\"spinners\">\r\n      {\" \"}\r\n      <Spinner animation=\"grow\" variant=\"primary\" />\r\n      <Spinner animation=\"grow\" variant=\"secondary\" />\r\n      <Spinner animation=\"grow\" variant=\"success\" />\r\n      <Spinner animation=\"grow\" variant=\"danger\" />\r\n      <Spinner animation=\"grow\" variant=\"warning\" />\r\n      <Spinner animation=\"grow\" variant=\"info\" />\r\n    </div>\r\n  ) : (\r\n      <div className=\"chartsNew\">\r\n        {isFrom()}\r\n\r\n        {renderLineChart()}\r\n      </div>\r\n    );\r\n}\r\n\r\nexport default Charts;","import React, { useEffect, useState } from \"react\";\r\nimport CardDeck from \"react-bootstrap/CardDeck\";\r\nimport Card from \"react-bootstrap/Card\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport Spinner from \"react-bootstrap/Spinner\";\r\nimport CountUp from \"react-countup\"\r\nimport \"./header.css\"\r\nimport Table from 'react-bootstrap/Table'\r\nimport NumberFormat from \"react-countup\";\r\nimport Charts from \"./Charts\";\r\n\r\n\r\n\r\n\r\nfunction Main(props) {\r\n  let [latest, setLatest] = useState([]);\r\n  let [nepal, setNepal] = useState([]);\r\n  let [loading, setLoading] = useState(true);\r\n  useEffect(async () => {\r\n\r\n    const urls = [\"https://disease.sh/v2/all?yesterday=false\",\r\n      \"https://disease.sh/v2/countries/nepal?yesterday=false&strict=true\"];\r\n    Promise.all([\r\n      fetch(urls[0]).then(value => value.json()),\r\n      fetch(urls[1]).then(value => value.json())\r\n    ])\r\n      .then((value) => {\r\n        setLatest(value[0])\r\n        setNepal(value[1])\r\n        setLoading(false)\r\n        console.log(value)\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  }, []);\r\n\r\n  function show() {\r\n    const date = new Date(parseInt(latest.updated));\r\n    const lastUpdated = date.toString();\r\n\r\n    const header = (\r\n      <div className=\"deckss\">\r\n        <span className=\"worldWide\">World Wide</span>\r\n        <CardDeck className=\"deck\">\r\n          <Card\r\n            bg={\"secondary\"}\r\n            text={\"white\"}\r\n            className=\"text-center\"\r\n            style={{ marginLeft: 3 }}\r\n          >\r\n            <Card.Body>\r\n              <Card.Title>Cases</Card.Title>\r\n              <Card.Text>\r\n                <CountUp\r\n                  end={latest.cases}\r\n                  duration={2}\r\n                  separator=\",\"\r\n                />\r\n              </Card.Text>\r\n            </Card.Body>\r\n            <Card.Footer>\r\n              <small>Last updated: {lastUpdated}</small>\r\n            </Card.Footer>\r\n          </Card>\r\n          <Card bg={\"danger\"} text={\"white\"} className=\"text-center\" style={{}}>\r\n            <Card.Body>\r\n              <Card.Title>Deaths</Card.Title>\r\n              <Card.Text>\r\n                {\" \"}\r\n                <CountUp\r\n                  end={latest.deaths}\r\n                  duration={2}\r\n                  separator=\",\"\r\n                />\r\n              </Card.Text>\r\n            </Card.Body>\r\n            <Card.Footer>\r\n              <small>Last updated: {lastUpdated}</small>\r\n            </Card.Footer>\r\n          </Card>\r\n          <Card\r\n            bg={\"success\"}\r\n            text={\"white\"}\r\n            className=\"text-center\"\r\n            style={{}}\r\n          >\r\n            <Card.Body>\r\n              <Card.Title>Recovered</Card.Title>\r\n              <Card.Text>\r\n                {\" \"}\r\n                <CountUp\r\n                  end={latest.recovered}\r\n                  duration={2}\r\n                  separator=\",\"\r\n                />\r\n              </Card.Text>\r\n            </Card.Body>\r\n            <Card.Footer>\r\n              <small>Last updated: {lastUpdated}</small>\r\n            </Card.Footer>\r\n          </Card>\r\n        </CardDeck>\r\n      </div>\r\n    );\r\n\r\n    return header;\r\n  }\r\n\r\n  function donno() {\r\n    const nepalFlag = nepal.countryInfo.flag;\r\n    const date = new Date(parseInt(latest.updated));\r\n    const lastUpdated = date.toString();\r\n    const toReturn =\r\n      <div className=\"all\">\r\n        <div className=\"title\">\r\n          Covid-19 updates\r\n        </div>\r\n        {/* <div className=\"mini\">\r\n          Nepal\r\n        </div>\r\n        <Container>\r\n          <Row>\r\n            <Col>Confirmed</Col>\r\n            <Col>Deaths</Col>\r\n            <Col>Recovered</Col>\r\n          </Row>\r\n          <Row>\r\n            <Col>{nepal.cases}</Col>\r\n            <Col>{nepal.deaths}</Col>\r\n            <Col>{nepal.recovered}</Col>\r\n          </Row>\r\n        </Container>\r\n        <div className=\"mini\">\r\n          World wide\r\n        </div>\r\n        <Container>\r\n          <Row>\r\n            <Col>Confirmed</Col>\r\n            <Col>Deaths</Col>\r\n            <Col>Recovered</Col>\r\n          </Row>\r\n          <Row>\r\n            <Col>{latest.cases}</Col>\r\n            <Col>{latest.deaths}</Col>\r\n            <Col>{latest.recovered}</Col>\r\n          </Row>\r\n        </Container> */}\r\n\r\n        <Table striped bordered hover variant=\"dark\">\r\n\r\n          <tbody>\r\n            <tr>\r\n              <th className=\"mini\" colSpan=\"3\">Nepal {}\r\n                <img src={nepalFlag} width=\"12\" alt=\"flag of nepal\" />\r\n\r\n              </th>\r\n            </tr>\r\n            <tr>\r\n              <td style={{ color: \"lightBlue\" }}>Confirmed</td>\r\n              <td style={{ color: \"red\" }}>Deaths</td>\r\n              <td style={{ color: \"green\" }}>Recovered</td>\r\n            </tr>\r\n            <tr>\r\n              <td>  <NumberFormat\r\n                end={nepal.cases}\r\n                duration={1.5}\r\n                separator={\",\"}\r\n              /></td>\r\n              <td>  <NumberFormat\r\n                end={nepal.deaths}\r\n                duration={1.5}\r\n                separator={\",\"}\r\n              /></td>\r\n              <td>  <NumberFormat\r\n                end={nepal.recovered}\r\n                duration={1.5}\r\n                separator={\",\"}\r\n              /></td>\r\n\r\n            </tr>\r\n            <tr>\r\n              <th className=\"mini\" colSpan=\"3\">World {}\r\n                <img src=\"https://www.globe.gov/globe-gov-home-portlet/images/learn-earth-system/learn-earth-system-clean.png\" width=\"12\"\r\n                  alt=\"globe\"\r\n                />\r\n              </th>\r\n            </tr>\r\n            <tr>\r\n              <td style={{ color: \"lightBlue\" }}>Confirmed</td>\r\n              <td style={{ color: \"red\" }}>Deaths</td>\r\n              <td style={{ color: \"green\" }}>Recovered</td>\r\n            </tr>\r\n            <tr>\r\n              <td>  <NumberFormat\r\n                end={latest.cases}\r\n                duration={1.5}\r\n                separator={\",\"}\r\n              /></td>\r\n              <td>  <NumberFormat\r\n                end={latest.deaths}\r\n                duration={1.5}\r\n                separator={\",\"}\r\n              /></td>\r\n              <td>  <NumberFormat\r\n                end={latest.recovered}\r\n                duration={1.5}\r\n                separator={\",\"}\r\n              /></td>\r\n\r\n            </tr>\r\n\r\n            <tr>\r\n              <td colSpan=\"3\">Last updated: {lastUpdated}</td>\r\n\r\n            </tr>\r\n\r\n            <tr>\r\n            <td colSpan=\"3\">Full information can be obtained from <a href=\"https://coronatrackersankraman.netlify.app/\">here</a>\r\n              </td>\r\n\r\n            </tr>\r\n\r\n\r\n          </tbody>\r\n        </Table>\r\n        <Charts name=\"Nepal\" />\r\n      </div>\r\n\r\n\r\n    return toReturn;\r\n  }\r\n  if (loading)\r\n    return (\r\n      <div className=\"spinners\">\r\n        {\" \"}\r\n        <Spinner animation=\"grow\" variant=\"primary\" />\r\n        <Spinner animation=\"grow\" variant=\"secondary\" />\r\n        <Spinner animation=\"grow\" variant=\"success\" />\r\n        <Spinner animation=\"grow\" variant=\"danger\" />\r\n        <Spinner animation=\"grow\" variant=\"warning\" />\r\n      </div>\r\n    );\r\n  return <div>  {donno()}\r\n  </div>;\r\n}\r\n\r\nexport default Main;\r\n","import React from 'react'\r\nimport Header from './header';\r\n\r\n\r\n\r\nfunction main(props) {\r\n    return (\r\n        <div>\r\n            <Header name=\"https://corona.lmao.ninja/v2/countries\"/>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default main\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport Main from './main';\r\n\r\n\r\n\r\nReactDOM.render(\r\n \r\n    <Main />,\r\n  \r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}